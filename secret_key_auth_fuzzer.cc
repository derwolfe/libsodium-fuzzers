#include <assert.h>
#include <sodium.h>
#include <algorithm>
#include <cstring>
#include <string>

#include "fake_random.h"

extern "C" int LLVMFuzzerTestOneInput(const unsigned char *data, size_t size) {
  int initialized = sodium_init();
  assert(initialized >= 0);

  setup_fake_random(data, size);

  unsigned char key[crypto_auth_KEYBYTES];
  unsigned char mac[crypto_auth_BYTES];

  unsigned char mac_check[crypto_auth_BYTES];

  std::memcpy(mac_check, &mac, crypto_auth_BYTES);

  crypto_auth_keygen(key);
  crypto_auth(mac, data, size, key);

  // the mac should change from its default to a new value after auth is called.
  int mac_changed = std::memcmp(mac, mac_check, crypto_auth_BYTES);
  assert(mac_changed != 0);

  // verification should not fail if the mac is generated by sodium.
  int check = crypto_auth_verify(mac, data, size, key);
  assert(check == 0);

  // none of the key material should be present in the mac
  unsigned char *offset = std::search(std::begin(mac), std::end(mac),
                                      std::begin(key), std::end(key));
  bool found = offset == std::end(key);  // how could this be right?
  assert(!found);

  return 0;
}
